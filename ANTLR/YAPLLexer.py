# Generated from YAPL.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,356,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,102,8,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,3,1,112,8,1,1,2,1,2,1,2,1,2,3,2,118,8,2,1,3,1,3,1,
        3,1,3,3,3,124,8,3,1,4,1,4,1,4,1,4,3,4,130,8,4,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,148,8,5,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,162,8,6,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,3,7,172,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,3,8,182,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,192,8,9,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,204,8,10,1,11,1,
        11,1,11,1,11,1,11,1,11,3,11,212,8,11,1,12,1,12,1,12,1,12,1,12,1,
        12,3,12,220,8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,228,8,13,1,14,
        1,14,5,14,232,8,14,10,14,12,14,235,9,14,1,15,1,15,5,15,239,8,15,
        10,15,12,15,242,9,15,1,16,4,16,245,8,16,11,16,12,16,246,1,17,1,17,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,5,19,
        263,8,19,10,19,12,19,266,9,19,1,19,1,19,1,20,1,20,1,20,3,20,273,
        8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,
        5,23,287,8,23,10,23,12,23,290,9,23,1,23,1,23,1,24,1,24,1,24,1,24,
        5,24,298,8,24,10,24,12,24,301,9,24,1,24,1,24,1,24,1,24,1,24,1,25,
        4,25,309,8,25,11,25,12,25,310,1,25,1,25,1,26,1,26,1,27,1,27,1,28,
        1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,
        1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,
        1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,0,0,45,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,0,43,0,45,0,47,21,49,22,
        51,23,53,24,55,25,57,26,59,27,61,28,63,29,65,30,67,31,69,32,71,33,
        73,34,75,35,77,36,79,37,81,38,83,39,85,40,87,41,89,42,1,0,10,1,0,
        97,122,4,0,48,57,65,90,95,95,97,122,1,0,65,90,1,0,48,57,2,0,34,34,
        92,92,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,116,
        3,0,48,57,65,70,97,102,2,0,10,10,13,13,6,0,9,10,13,13,48,57,65,90,
        95,95,97,122,3,0,9,10,12,13,32,32,375,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,101,
        1,0,0,0,3,111,1,0,0,0,5,117,1,0,0,0,7,123,1,0,0,0,9,129,1,0,0,0,
        11,147,1,0,0,0,13,161,1,0,0,0,15,171,1,0,0,0,17,181,1,0,0,0,19,191,
        1,0,0,0,21,203,1,0,0,0,23,211,1,0,0,0,25,219,1,0,0,0,27,227,1,0,
        0,0,29,229,1,0,0,0,31,236,1,0,0,0,33,244,1,0,0,0,35,248,1,0,0,0,
        37,254,1,0,0,0,39,259,1,0,0,0,41,269,1,0,0,0,43,274,1,0,0,0,45,280,
        1,0,0,0,47,282,1,0,0,0,49,293,1,0,0,0,51,308,1,0,0,0,53,314,1,0,
        0,0,55,316,1,0,0,0,57,318,1,0,0,0,59,320,1,0,0,0,61,322,1,0,0,0,
        63,324,1,0,0,0,65,326,1,0,0,0,67,328,1,0,0,0,69,331,1,0,0,0,71,333,
        1,0,0,0,73,335,1,0,0,0,75,337,1,0,0,0,77,339,1,0,0,0,79,341,1,0,
        0,0,81,343,1,0,0,0,83,345,1,0,0,0,85,347,1,0,0,0,87,349,1,0,0,0,
        89,352,1,0,0,0,91,92,5,99,0,0,92,93,5,108,0,0,93,94,5,97,0,0,94,
        95,5,115,0,0,95,102,5,115,0,0,96,97,5,67,0,0,97,98,5,76,0,0,98,99,
        5,65,0,0,99,100,5,83,0,0,100,102,5,83,0,0,101,91,1,0,0,0,101,96,
        1,0,0,0,102,2,1,0,0,0,103,104,5,101,0,0,104,105,5,108,0,0,105,106,
        5,115,0,0,106,112,5,101,0,0,107,108,5,69,0,0,108,109,5,76,0,0,109,
        110,5,83,0,0,110,112,5,69,0,0,111,103,1,0,0,0,111,107,1,0,0,0,112,
        4,1,0,0,0,113,114,5,102,0,0,114,118,5,105,0,0,115,116,5,70,0,0,116,
        118,5,73,0,0,117,113,1,0,0,0,117,115,1,0,0,0,118,6,1,0,0,0,119,120,
        5,105,0,0,120,124,5,102,0,0,121,122,5,73,0,0,122,124,5,70,0,0,123,
        119,1,0,0,0,123,121,1,0,0,0,124,8,1,0,0,0,125,126,5,105,0,0,126,
        130,5,110,0,0,127,128,5,73,0,0,128,130,5,78,0,0,129,125,1,0,0,0,
        129,127,1,0,0,0,130,10,1,0,0,0,131,132,5,105,0,0,132,133,5,110,0,
        0,133,134,5,104,0,0,134,135,5,101,0,0,135,136,5,114,0,0,136,137,
        5,105,0,0,137,138,5,116,0,0,138,148,5,115,0,0,139,140,5,73,0,0,140,
        141,5,78,0,0,141,142,5,72,0,0,142,143,5,69,0,0,143,144,5,82,0,0,
        144,145,5,73,0,0,145,146,5,84,0,0,146,148,5,83,0,0,147,131,1,0,0,
        0,147,139,1,0,0,0,148,12,1,0,0,0,149,150,5,105,0,0,150,151,5,115,
        0,0,151,152,5,118,0,0,152,153,5,111,0,0,153,154,5,105,0,0,154,162,
        5,100,0,0,155,156,5,73,0,0,156,157,5,83,0,0,157,158,5,86,0,0,158,
        159,5,79,0,0,159,160,5,73,0,0,160,162,5,68,0,0,161,149,1,0,0,0,161,
        155,1,0,0,0,162,14,1,0,0,0,163,164,5,108,0,0,164,165,5,111,0,0,165,
        166,5,111,0,0,166,172,5,112,0,0,167,168,5,76,0,0,168,169,5,79,0,
        0,169,170,5,79,0,0,170,172,5,80,0,0,171,163,1,0,0,0,171,167,1,0,
        0,0,172,16,1,0,0,0,173,174,5,112,0,0,174,175,5,111,0,0,175,176,5,
        111,0,0,176,182,5,108,0,0,177,178,5,80,0,0,178,179,5,79,0,0,179,
        180,5,79,0,0,180,182,5,76,0,0,181,173,1,0,0,0,181,177,1,0,0,0,182,
        18,1,0,0,0,183,184,5,116,0,0,184,185,5,104,0,0,185,186,5,101,0,0,
        186,192,5,110,0,0,187,188,5,84,0,0,188,189,5,72,0,0,189,190,5,69,
        0,0,190,192,5,78,0,0,191,183,1,0,0,0,191,187,1,0,0,0,192,20,1,0,
        0,0,193,194,5,119,0,0,194,195,5,104,0,0,195,196,5,105,0,0,196,197,
        5,108,0,0,197,204,5,101,0,0,198,199,5,87,0,0,199,200,5,72,0,0,200,
        201,5,73,0,0,201,202,5,76,0,0,202,204,5,69,0,0,203,193,1,0,0,0,203,
        198,1,0,0,0,204,22,1,0,0,0,205,206,5,110,0,0,206,207,5,101,0,0,207,
        212,5,119,0,0,208,209,5,78,0,0,209,210,5,69,0,0,210,212,5,87,0,0,
        211,205,1,0,0,0,211,208,1,0,0,0,212,24,1,0,0,0,213,214,5,110,0,0,
        214,215,5,111,0,0,215,220,5,116,0,0,216,217,5,78,0,0,217,218,5,79,
        0,0,218,220,5,84,0,0,219,213,1,0,0,0,219,216,1,0,0,0,220,26,1,0,
        0,0,221,222,5,108,0,0,222,223,5,101,0,0,223,228,5,116,0,0,224,225,
        5,76,0,0,225,226,5,69,0,0,226,228,5,84,0,0,227,221,1,0,0,0,227,224,
        1,0,0,0,228,28,1,0,0,0,229,233,7,0,0,0,230,232,7,1,0,0,231,230,1,
        0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,30,1,0,
        0,0,235,233,1,0,0,0,236,240,7,2,0,0,237,239,7,1,0,0,238,237,1,0,
        0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,32,1,0,0,
        0,242,240,1,0,0,0,243,245,7,3,0,0,244,243,1,0,0,0,245,246,1,0,0,
        0,246,244,1,0,0,0,246,247,1,0,0,0,247,34,1,0,0,0,248,249,5,102,0,
        0,249,250,5,97,0,0,250,251,5,108,0,0,251,252,5,115,0,0,252,253,5,
        101,0,0,253,36,1,0,0,0,254,255,5,116,0,0,255,256,5,114,0,0,256,257,
        5,117,0,0,257,258,5,101,0,0,258,38,1,0,0,0,259,264,5,34,0,0,260,
        263,3,41,20,0,261,263,8,4,0,0,262,260,1,0,0,0,262,261,1,0,0,0,263,
        266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,267,1,0,0,0,266,
        264,1,0,0,0,267,268,5,34,0,0,268,40,1,0,0,0,269,272,5,92,0,0,270,
        273,7,5,0,0,271,273,3,43,21,0,272,270,1,0,0,0,272,271,1,0,0,0,273,
        42,1,0,0,0,274,275,5,117,0,0,275,276,3,45,22,0,276,277,3,45,22,0,
        277,278,3,45,22,0,278,279,3,45,22,0,279,44,1,0,0,0,280,281,7,6,0,
        0,281,46,1,0,0,0,282,283,5,45,0,0,283,284,5,45,0,0,284,288,1,0,0,
        0,285,287,8,7,0,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,
        0,288,289,1,0,0,0,289,291,1,0,0,0,290,288,1,0,0,0,291,292,6,23,0,
        0,292,48,1,0,0,0,293,294,5,40,0,0,294,295,5,42,0,0,295,299,1,0,0,
        0,296,298,8,8,0,0,297,296,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,
        0,299,300,1,0,0,0,300,302,1,0,0,0,301,299,1,0,0,0,302,303,5,42,0,
        0,303,304,5,41,0,0,304,305,1,0,0,0,305,306,6,24,0,0,306,50,1,0,0,
        0,307,309,7,9,0,0,308,307,1,0,0,0,309,310,1,0,0,0,310,308,1,0,0,
        0,310,311,1,0,0,0,311,312,1,0,0,0,312,313,6,25,0,0,313,52,1,0,0,
        0,314,315,5,59,0,0,315,54,1,0,0,0,316,317,5,123,0,0,317,56,1,0,0,
        0,318,319,5,125,0,0,319,58,1,0,0,0,320,321,5,40,0,0,321,60,1,0,0,
        0,322,323,5,41,0,0,323,62,1,0,0,0,324,325,5,44,0,0,325,64,1,0,0,
        0,326,327,5,58,0,0,327,66,1,0,0,0,328,329,5,60,0,0,329,330,5,45,
        0,0,330,68,1,0,0,0,331,332,5,64,0,0,332,70,1,0,0,0,333,334,5,46,
        0,0,334,72,1,0,0,0,335,336,5,43,0,0,336,74,1,0,0,0,337,338,5,45,
        0,0,338,76,1,0,0,0,339,340,5,42,0,0,340,78,1,0,0,0,341,342,5,47,
        0,0,342,80,1,0,0,0,343,344,5,61,0,0,344,82,1,0,0,0,345,346,5,126,
        0,0,346,84,1,0,0,0,347,348,5,60,0,0,348,86,1,0,0,0,349,350,5,60,
        0,0,350,351,5,61,0,0,351,88,1,0,0,0,352,353,9,0,0,0,353,354,1,0,
        0,0,354,355,6,44,0,0,355,90,1,0,0,0,24,0,101,111,117,123,129,147,
        161,171,181,191,203,211,219,227,233,240,246,262,264,272,288,299,
        310,1,6,0,0
    ]

class YAPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CLASS = 1
    ELSE = 2
    FI = 3
    IF = 4
    IN = 5
    INHERITS = 6
    IS_VOID = 7
    LOOP = 8
    POOL = 9
    THEN = 10
    WHILE = 11
    NEW = 12
    NOT = 13
    LET = 14
    ID = 15
    TYPE = 16
    INT = 17
    FALSE = 18
    TRUE = 19
    STRING = 20
    COMMENT = 21
    COMMENT_BLOCK = 22
    WHITE_SPACE = 23
    SEMICOLON = 24
    OPEN_CURLY_BRACKETS = 25
    CLOSE_CURLY_BRACKETS = 26
    OPEN_PARENTHESES = 27
    CLOSE_PARENTHESES = 28
    COMMA = 29
    COLON = 30
    ASSING = 31
    AT = 32
    DOT = 33
    ADD = 34
    SUB = 35
    MUL = 36
    DIV = 37
    EQUAL = 38
    N_MARK = 39
    LOWER_THAN = 40
    LOWER_THAN_EQUAL = 41
    ERROR = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'false'", "'true'", "';'", "'{'", "'}'", "'('", "')'", "','", 
            "':'", "'<-'", "'@'", "'.'", "'+'", "'-'", "'*'", "'/'", "'='", 
            "'~'", "'<'", "'<='" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "ELSE", "FI", "IF", "IN", "INHERITS", "IS_VOID", "LOOP", 
            "POOL", "THEN", "WHILE", "NEW", "NOT", "LET", "ID", "TYPE", 
            "INT", "FALSE", "TRUE", "STRING", "COMMENT", "COMMENT_BLOCK", 
            "WHITE_SPACE", "SEMICOLON", "OPEN_CURLY_BRACKETS", "CLOSE_CURLY_BRACKETS", 
            "OPEN_PARENTHESES", "CLOSE_PARENTHESES", "COMMA", "COLON", "ASSING", 
            "AT", "DOT", "ADD", "SUB", "MUL", "DIV", "EQUAL", "N_MARK", 
            "LOWER_THAN", "LOWER_THAN_EQUAL", "ERROR" ]

    ruleNames = [ "CLASS", "ELSE", "FI", "IF", "IN", "INHERITS", "IS_VOID", 
                  "LOOP", "POOL", "THEN", "WHILE", "NEW", "NOT", "LET", 
                  "ID", "TYPE", "INT", "FALSE", "TRUE", "STRING", "ESC", 
                  "UNICODE", "HEX", "COMMENT", "COMMENT_BLOCK", "WHITE_SPACE", 
                  "SEMICOLON", "OPEN_CURLY_BRACKETS", "CLOSE_CURLY_BRACKETS", 
                  "OPEN_PARENTHESES", "CLOSE_PARENTHESES", "COMMA", "COLON", 
                  "ASSING", "AT", "DOT", "ADD", "SUB", "MUL", "DIV", "EQUAL", 
                  "N_MARK", "LOWER_THAN", "LOWER_THAN_EQUAL", "ERROR" ]

    grammarFileName = "YAPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


